#!/usr/bin/env python3

import time
import sys
import re
from datetime import timedelta, datetime
import argparse

timedelta_regex = re.compile(
    r"((?P<hours>\d+?)h)?((?P<minutes>\d+?)m)?((?P<seconds>\d+?)s)?"
)
datetime_regex = re.compile(r"(?P<hours>\d{2}):(?P<minutes>\d{2}):(?P<seconds>\d{2})")


def parse_timedelta(matches):
    matches = matches.groupdict()
    time_params = {}
    for name, param in matches.items():
        if param:
            time_params[name] = int(param)
    return timedelta(**time_params)


def parse_datetime(matches):
    matches = matches.groupdict()
    now = datetime.now()
    target = datetime(
        year=now.year,
        month=now.month,
        day=now.day,
        hour=int(matches.get("hours")),
        minute=int(matches.get("minutes")),
        second=int(matches.get("seconds")),
    )

    if target > now:
        return target - now
    else:
        return target + timedelta(days=1) - now


def parse_time(time_str):
    if matches := datetime_regex.match(time_str):
        return parse_datetime(matches)
    elif matches := timedelta_regex.match(time_str):
        return parse_timedelta(matches)


def parse_args():
    parser = argparse.ArgumentParser(description="Alarm clock util")
    parser.add_argument("time")
    parser.add_argument("--verbose", action="store_true")
    return parser.parse_args()


def main():
    args = parse_args()
    delta_time = parse_time(args.time)

    total_seconds = delta_time.total_seconds()

    if not args.verbose:
        time.sleep(total_seconds)
    else:
        step = total_seconds / 10
        count = 0
        for i in range(10):
            count += step
            print(f"{i}: {round(count)}/{total_seconds}")
            time.sleep(step)

    return 0



if __name__ == "__main__":
    main()
